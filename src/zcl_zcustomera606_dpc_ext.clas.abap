class ZCL_ZCUSTOMERA606_DPC_EXT definition
  public
  inheriting from ZCL_ZCUSTOMERA606_DPC
  create public .

public section.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION
    redefinition .
protected section.

  methods ADDRESSSET_CREATE_ENTITY
    redefinition .
  methods ADDRESSSET_DELETE_ENTITY
    redefinition .
  methods ADDRESSSET_GET_ENTITY
    redefinition .
  methods ADDRESSSET_GET_ENTITYSET
    redefinition .
  methods ADDRESSSET_UPDATE_ENTITY
    redefinition .
  methods ATTENDSET_GET_ENTITYSET
    redefinition .
  methods CUSTOMERSET_CREATE_ENTITY
    redefinition .
  methods CUSTOMERSET_DELETE_ENTITY
    redefinition .
  methods CUSTOMERSET_GET_ENTITY
    redefinition .
  methods CUSTOMERSET_GET_ENTITYSET
    redefinition .
  methods CUSTOMERSET_UPDATE_ENTITY
    redefinition .
  methods USERSET_CREATE_ENTITY
    redefinition .
  methods USERSET_GET_ENTITY
    redefinition .
  methods USERSET_GET_ENTITYSET
    redefinition .
  methods USERSET_UPDATE_ENTITY
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_ZCUSTOMERA606_DPC_EXT IMPLEMENTATION.


  METHOD ADDRESSSET_DELETE_ENTITY.
    DATA: LT_KEYS      TYPE /IWBEP/T_MGW_TECH_PAIRS,
          LS_KEY       TYPE /IWBEP/S_MGW_TECH_PAIR,
          LV_ADDRESSID TYPE ZCUSTADDRESS606-ADDRESS_ID.

    LT_KEYS = IO_TECH_REQUEST_CONTEXT->GET_KEYS( ).

    READ TABLE LT_KEYS WITH KEY NAME = 'ADDRESS_ID' INTO LS_KEY.
    LV_ADDRESSID = LS_KEY-VALUE.

    DELETE FROM ZCUSTADDRESS606 WHERE ADDRESS_ID = LV_ADDRESSID.
  ENDMETHOD.


  METHOD ADDRESSSET_GET_ENTITY.
    DATA:LS_KEYTAB TYPE LINE OF /IWBEP/T_MGW_NAME_VALUE_PAIR.
    DATA(LV_SOURCE) = IV_SOURCE_NAME.

    IF LV_SOURCE = 'Customer'.
      LOOP AT IT_KEY_TAB INTO LS_KEYTAB.
      ENDLOOP.
      SELECT SINGLE * FROM ZCUSTADDRESS606 INTO CORRESPONDING FIELDS OF ER_ENTITY WHERE CUSTOMER_ID = LS_KEYTAB-VALUE.

    ELSE.
      LOOP AT IT_KEY_TAB INTO LS_KEYTAB.
      ENDLOOP.
      SELECT SINGLE * FROM ZCUSTADDRESS606 INTO CORRESPONDING FIELDS OF ER_ENTITY WHERE ADDRESS_ID = LS_KEYTAB-VALUE.
    ENDIF.



  ENDMETHOD.


  method ADDRESSSET_GET_ENTITYSET.
    SELECT * FROM ZCUSTADDRESS606 INTO CORRESPONDING FIELDS OF TABLE ET_ENTITYSET.
  endmethod.


METHOD CUSTOMERSET_DELETE_ENTITY.
  DATA: LT_KEYS       TYPE /IWBEP/T_MGW_TECH_PAIRS,
        LS_KEY        TYPE /IWBEP/S_MGW_TECH_PAIR,
        LV_CUSTOMERID TYPE ZCUST606-CUSTOMER_ID,
        LV_CUSTADDRESSID  TYPE ZCUSTADDRESS606-CUSTOMER_ID.

  LT_KEYS = IO_TECH_REQUEST_CONTEXT->GET_KEYS( ).

  READ TABLE LT_KEYS WITH KEY NAME = 'CUSTOMER_ID' INTO LS_KEY.
  LV_CUSTOMERID = LS_KEY-VALUE.

  DELETE FROM ZCUST606 WHERE CUSTOMER_ID = LV_CUSTOMERID.

  "Delete Address

  SELECT SINGLE CUSTOMER_ID FROM ZCUSTADDRESS606 INTO LV_CUSTADDRESSID WHERE CUSTOMER_ID = LV_CUSTOMERID.

  IF LV_CUSTADDRESSID > 0.
    DELETE FROM ZCUSTADDRESS606 WHERE CUSTOMER_ID = LV_CUSTADDRESSID.
  ENDIF.


  DELETE FROM ZCUSTADDRESS606 WHERE CUSTOMER_ID = LV_CUSTOMERID.

ENDMETHOD.


  METHOD CUSTOMERSET_GET_ENTITY.
    DATA:LS_KEYTAB TYPE LINE OF /IWBEP/T_MGW_NAME_VALUE_PAIR.

    LOOP AT IT_KEY_TAB INTO LS_KEYTAB.
    ENDLOOP.
    SELECT SINGLE * FROM ZCUST606 INTO CORRESPONDING FIELDS OF ER_ENTITY WHERE CUSTOMER_ID = LS_KEYTAB-VALUE.
  ENDMETHOD.


  METHOD CUSTOMERSET_GET_ENTITYSET.
    "Seleção de campos
    DATA(LT_SELECT) = IO_TECH_REQUEST_CONTEXT->GET_SELECT_WITH_MANDTRY_FIELDS( ).

    DATA(LV_WHERE) = IO_TECH_REQUEST_CONTEXT->GET_OSQL_WHERE_CLAUSE_CONVERT( ).
    DATA(LV_WHERE2) = IO_TECH_REQUEST_CONTEXT->GET_OSQL_WHERE_CLAUSE( ).

    SELECT (LT_SELECT)
      FROM ZCUST606
      INTO CORRESPONDING FIELDS OF TABLE ET_ENTITYSET
    WHERE (LV_WHERE).

  ENDMETHOD.


  METHOD CUSTOMERSET_CREATE_ENTITY.
    DATA: LS_CUSTOMER TYPE ZCUST606,
          LV_MAX      TYPE ZCUST606-CUSTOMER_ID,
          LV_EMAIL    TYPE ZCUST606-EMAIL.

    IO_DATA_PROVIDER->READ_ENTRY_DATA(
      IMPORTING
        ES_DATA = ER_ENTITY
    ).

    MOVE-CORRESPONDING ER_ENTITY TO LS_CUSTOMER.

    " Verifica se o e-mail já existe na tabela ZCUST606
    SELECT SINGLE EMAIL FROM ZCUST606 INTO LV_EMAIL
    WHERE EMAIL = LS_CUSTOMER-EMAIL.

    IF SY-SUBRC EQ 0.
      " E-mail já existe, aciona uma exceção ou trata de alguma forma a situação
      RAISE EXCEPTION TYPE /IWBEP/CX_MGW_BUSI_EXCEPTION
        EXPORTING
           textid = /iwbep/cx_mgw_busi_exception=>business_error_unlimited
           message_unlimited = 'E-mail já cadastrado.'.
    ENDIF.


    SELECT MAX( CUSTOMER_ID ) FROM ZCUST606 INTO LV_MAX.
    LS_CUSTOMER-CUSTOMER_ID = LV_MAX + 1.

    INSERT ZCUST606 FROM LS_CUSTOMER.

    MOVE-CORRESPONDING LS_CUSTOMER TO ER_ENTITY.

  ENDMETHOD.


  METHOD CUSTOMERSET_UPDATE_ENTITY.

    DATA: LS_CUSTOMER TYPE ZCUST606,
          LV_EMAIL    TYPE ZCUST606-EMAIL.

    IO_DATA_PROVIDER->READ_ENTRY_DATA(
      IMPORTING
        ES_DATA = ER_ENTITY
    ).

    "CAMPOS CHAVE
    DATA: LS_ENTITY TYPE ZCL_ZCUSTOMERA606_MPC=>TS_CUSTOMER.

    IO_TECH_REQUEST_CONTEXT->GET_CONVERTED_KEYS(
    IMPORTING
      ES_KEY_VALUES = LS_ENTITY
      ).

    MOVE-CORRESPONDING ER_ENTITY TO LS_CUSTOMER.


    LS_CUSTOMER-CUSTOMER_ID = LS_ENTITY-CUSTOMER_ID.
    UPDATE ZCUST606 FROM LS_CUSTOMER.
    "tratamento de mensagens
    DATA(LV_CONTAINER) = MO_CONTEXT->GET_MESSAGE_CONTAINER( ).

    LV_CONTAINER->ADD_MESSAGE_TEXT_ONLY(
        IV_MSG_TYPE = 'S'
        IV_MSG_TEXT = 'Alterado com Sucesso'
        IV_ADD_TO_RESPONSE_HEADER = ABAP_TRUE
    ).


  ENDMETHOD.


  METHOD /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION.
    DATA: LS_PARAMETER TYPE /IWBEP/S_MGW_NAME_VALUE_PAIR,
          LV_EMAIL     TYPE ZCUSTUSER606-EMAIL,
          LV_PASSWORD  TYPE ZCUSTUSER606-PASSWORD,
          LS_ENTITY    TYPE ZCL_ZCUSTOMERA606_MPC=>TS_USER.


    IF IV_ACTION_NAME = 'Login'. " Check what action is being requested
      IF IT_PARAMETER IS NOT INITIAL.

        READ TABLE IT_PARAMETER INTO LS_PARAMETER WITH KEY NAME = 'Email'.
        IF SY-SUBRC = 0.
          LV_EMAIL = LS_PARAMETER-VALUE.
        ENDIF.

        READ TABLE IT_PARAMETER INTO LS_PARAMETER WITH KEY NAME = 'Password'.
        IF SY-SUBRC = 0.
          LV_PASSWORD = LS_PARAMETER-VALUE.
        ENDIF.

        IF LV_EMAIL IS NOT INITIAL AND LV_PASSWORD IS NOT INITIAL.
          SELECT SINGLE * FROM ZCUSTUSER606 INTO CORRESPONDING FIELDS OF LS_ENTITY WHERE EMAIL = LV_EMAIL AND PASSWORD = LV_PASSWORD.
          IF SY-SUBRC <> 0.
            " E-mail já existe, aciona uma exceção ou trata de alguma forma a situação
            RAISE EXCEPTION TYPE /IWBEP/CX_MGW_BUSI_EXCEPTION
              EXPORTING
                TEXTID            = /IWBEP/CX_MGW_BUSI_EXCEPTION=>BUSINESS_ERROR_UNLIMITED
                MESSAGE_UNLIMITED = 'Usúario ou senha inválidos.'.
          ELSE.
            SELECT SINGLE * FROM ZCUSTUSER606 INTO CORRESPONDING FIELDS OF LS_ENTITY WHERE EMAIL = LV_EMAIL AND PASSWORD = LV_PASSWORD.
          ENDIF.

          COPY_DATA_TO_REF(
            EXPORTING
              IS_DATA = LS_ENTITY
              CHANGING
                CR_DATA = ER_DATA
          ).
        ELSE.
          " E-mail já existe, aciona uma exceção ou trata de alguma forma a situação
          RAISE EXCEPTION TYPE /IWBEP/CX_MGW_BUSI_EXCEPTION
            EXPORTING
              TEXTID            = /IWBEP/CX_MGW_BUSI_EXCEPTION=>BUSINESS_ERROR_UNLIMITED
              MESSAGE_UNLIMITED = 'Usúario ou senha inválidos.'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD ADDRESSSET_CREATE_ENTITY.
    DATA: LS_ADDRESS TYPE ZCUSTADDRESS606,
          LV_MAX     TYPE ZCUSTADDRESS606-ADDRESS_ID.


    IO_DATA_PROVIDER->READ_ENTRY_DATA(
      IMPORTING
        ES_DATA = ER_ENTITY
    ).

    MOVE-CORRESPONDING ER_ENTITY TO LS_ADDRESS.


    SELECT MAX( ADDRESS_ID ) FROM ZCUSTADDRESS606 INTO LV_MAX.
    LS_address-ADDRESS_ID = LV_MAX + 1.

    INSERT ZCUSTADDRESS606 FROM LS_ADDRESS.

    MOVE-CORRESPONDING LS_ADDRESS TO ER_ENTITY.
  ENDMETHOD.


  METHOD ADDRESSSET_UPDATE_ENTITY.
    DATA: LS_ADDRESS TYPE ZCUSTADDRESS606.


    IO_DATA_PROVIDER->READ_ENTRY_DATA(
      IMPORTING
        ES_DATA = ER_ENTITY
    ).

    "CAMPOS CHAVE
    DATA: LS_ENTITY TYPE ZCL_ZCUSTOMERA606_MPC=>TS_ADDRESS.

    IO_TECH_REQUEST_CONTEXT->GET_CONVERTED_KEYS(
    IMPORTING
      ES_KEY_VALUES = LS_ENTITY
      ).

    MOVE-CORRESPONDING ER_ENTITY TO LS_ADDRESS.


    LS_ADDRESS-ADDRESS_ID = LS_ENTITY-ADDRESS_ID.
    UPDATE ZCUSTADDRESS606 FROM LS_ADDRESS.
    "tratamento de mensagens
    DATA(LV_CONTAINER) = MO_CONTEXT->GET_MESSAGE_CONTAINER( ).

    LV_CONTAINER->ADD_MESSAGE_TEXT_ONLY(
        IV_MSG_TYPE = 'S'
        IV_MSG_TEXT = 'Alterado com Sucesso'
        IV_ADD_TO_RESPONSE_HEADER = ABAP_TRUE
    ).


  ENDMETHOD.


  METHOD ATTENDSET_GET_ENTITYSET.
    SELECT * FROM ZCUSTATTEND606 INTO CORRESPONDING FIELDS OF TABLE ET_ENTITYSET.
  ENDMETHOD.


 METHOD USERSET_CREATE_ENTITY.
   DATA: LS_USER TYPE ZCUSTUSER606,
   LV_MAX      TYPE ZCUSTUSER606-USER_ID,
   LV_EMAIL    TYPE ZCUSTUSER606-EMAIL.

   IO_DATA_PROVIDER->READ_ENTRY_DATA(
     IMPORTING
       ES_DATA = ER_ENTITY
   ).

   MOVE-CORRESPONDING ER_ENTITY TO LS_USER.

   " Verifica se o e-mail já existe na tabela ZCUST606
   SELECT SINGLE EMAIL FROM ZCUSTUSER606 INTO LV_EMAIL
   WHERE EMAIL = LS_USER-EMAIL.

   IF SY-SUBRC EQ 0.
     " E-mail já existe, aciona uma exceção ou trata de alguma forma a situação
     RAISE EXCEPTION TYPE /IWBEP/CX_MGW_BUSI_EXCEPTION
       EXPORTING
         TEXTID            = /IWBEP/CX_MGW_BUSI_EXCEPTION=>BUSINESS_ERROR_UNLIMITED
         MESSAGE_UNLIMITED = 'E-mail já cadastrado.'.
   ENDIF.


   SELECT MAX( USER_ID ) FROM ZCUSTUSER606 INTO LV_MAX.
   LS_USER-USER_ID = LV_MAX + 1.

   INSERT ZCUSTUSER606 FROM LS_USER.

   MOVE-CORRESPONDING LS_USER TO ER_ENTITY.

 ENDMETHOD.


  METHOD USERSET_GET_ENTITY.
    DATA:LS_KEYTAB TYPE LINE OF /IWBEP/T_MGW_NAME_VALUE_PAIR.

    LOOP AT IT_KEY_TAB INTO LS_KEYTAB.
    ENDLOOP.
    SELECT SINGLE * FROM ZCUSTUSER606 INTO CORRESPONDING FIELDS OF ER_ENTITY WHERE USER_ID = LS_KEYTAB-VALUE.
  ENDMETHOD.


  method USERSET_GET_ENTITYSET.
    SELECT * FROM ZCUSTUSER606 INTO CORRESPONDING FIELDS OF TABLE ET_ENTITYSET.
  endmethod.


  METHOD USERSET_UPDATE_ENTITY.
    DATA: LS_USER TYPE ZCUSTUSER606.


    IO_DATA_PROVIDER->READ_ENTRY_DATA(
      IMPORTING
        ES_DATA = ER_ENTITY
    ).

    "CAMPOS CHAVE
    DATA: LS_ENTITY TYPE ZCL_ZCUSTOMERA606_MPC=>TS_USER.

    IO_TECH_REQUEST_CONTEXT->GET_CONVERTED_KEYS(
    IMPORTING
      ES_KEY_VALUES = LS_ENTITY
      ).

    MOVE-CORRESPONDING ER_ENTITY TO LS_USER.


    LS_USER-USER_ID = LS_ENTITY-USER_ID.
    UPDATE ZCUSTUSER606 FROM LS_USER.
    "tratamento de mensagens
    DATA(LV_CONTAINER) = MO_CONTEXT->GET_MESSAGE_CONTAINER( ).

    LV_CONTAINER->ADD_MESSAGE_TEXT_ONLY(
        IV_MSG_TYPE = 'S'
        IV_MSG_TEXT = 'Alterado com Sucesso'
        IV_ADD_TO_RESPONSE_HEADER = ABAP_TRUE
    ).

  ENDMETHOD.
ENDCLASS.
